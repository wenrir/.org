#+title: Services
#+options: prop:t
#+include: ./secrets.org

* EMACS
** Daemon
:PROPERTIES:
:header-args: :comments no :mkdirp yes :tangle ~/.config/systemd/user/emacs.service :noweb tangle
:END:
#+begin_src conf
[Unit]
Description=Emacs server daemon
Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/

[Service]
Type=forking
ExecStart=bash -c 'emacs --daemon && emacsclient -c --eval "(delete-frame)"'
ExecStop=/usr/bin/emacsclient --no-wait --eval "(progn (setq kill-emacs-hook nil) (kill emacs))"
Environment=COLORTERM=truecolor
Restart=on-failure

[Install]
WantedBy=default.target
#+end_src
** Start service
#+name: start service
#+begin_src sh :results silent :tangle no
systemctl --user enable emacs.service
systemctl --user start emacs.service
#+end_src

** Emacs client wrapper
:PROPERTIES:
:header-args: :comments no :mkdirp yes :tangle ~/.local/bin/mac :noweb tangle
:END:
Inspired (stolen) from : https://tecosaur.github.io/emacs-config/config.html#doom-configuration
#+begin_src conf
#!/usr/bin/env bash
force_tty=false
force_wait=false
stdin_mode=""

args=()

while :; do
    case "$1" in
        -t | -nw | --tty)
            force_tty=true
            shift ;;
        -w | --wait)
            force_wait=true
            shift ;;
        -m | --mode)
            stdin_mode=" ($2-mode)"
            shift 2 ;;
        -h | --help)
            echo -e "\033[1mUsage: e [-t] [-m MODE] [OPTIONS] FILE [-]\033[0m

Emacs client convenience wrapper.

\033[1mOptions:\033[0m
\033[0;34m-h, --help\033[0m            Show this message
\033[0;34m-t, -nw, --tty\033[0m        Force terminal mode
\033[0;34m-w, --wait\033[0m            Don't supply \033[0;34m--no-wait\033[0m to graphical emacsclient
\033[0;34m-\033[0m                     Take \033[0;33mstdin\033[0m (when last argument)
\033[0;34m-m MODE, --mode MODE\033[0m  Mode to open \033[0;33mstdin\033[0m with

Run \033[0;32memacsclient --help\033[0m to see help for the emacsclient."
            exit 0 ;;
        --*=*)
            set -- "$@" "${1%%=*}" "${1#*=}"
            shift ;;
        *)
            if [ "$#" = 0 ]; then
                break; fi
            args+=("$1")
            shift ;;
    esac
done

if [ ! "${#args[*]}" = 0 ] && [ "${args[-1]}" = "-" ]; then
    unset 'args[-1]'
    TMP="$(mktemp /tmp/emacsstdin-XXX)"
    cat > "$TMP"
    args+=(--eval "(let ((b (generate-new-buffer \"*stdin*\"))) (switch-to-buffer b) (insert-file-contents \"$TMP\") (delete-file \"$TMP\")${stdin_mode})")
fi

if [ -z "$WAYLAND_DISPLAY" ] || $force_tty; then
    # detect terminals with sneaky 24-bit support
    if { [ "$COLORTERM" = truecolor ] || [ "$COLORTERM" = 24bit ]; } \
        && [ "$(tput colors 2>/dev/null)" -lt 257 ]; then
        if echo "$TERM" | grep -q "^\w\+-[0-9]"; then
            termstub="${TERM%%-*}"; else
            termstub="${TERM#*-}"; fi
        if infocmp "$termstub-direct" >/dev/null 2>&1; then
            TERM="$termstub-direct"; else
            TERM="xterm-direct"; fi # should be fairly safe
    fi
    emacsclient --tty -create-frame --alternate-editor="$ALTERNATE_EDITOR" "${args[@]}"
else
    if ! $force_wait; then
        args+=(--no-wait); fi
    emacsclient -create-frame --alternate-editor="$ALTERNATE_EDITOR" "${args[@]}"
fi
#+end_src

*** PATH
:PROPERTIES:
:header-args: :comments no :mkdirp yes :tangle ~/.bashrc :noweb tangle
:END:
#+begin_src conf
command -v mac >/dev/null || export PATH="$HOME/.local/bin/:$PATH"
#+end_src

* EVREMAP
** Daemon
:PROPERTIES:
:header-args: :comments no :mkdirp yes :tangle ~/.config/evremap/evremap.service :noweb tangle
:END:
#+begin_src conf
[Service]
WorkingDirectory=/
ExecStart=bash -c "/usr/bin/evremap remap /home/<<user>>/.config/evremap/evremap.toml -d 0"
Restart=always

[Install]
WantedBy=multi-user.target
#+end_src

** Config
:PROPERTIES:
:header-args: :comments no :mkdirp yes :tangle ~/.config/evremap/evremap.toml :noweb tangle
:END:
#+begin_src toml
device_name = "AT Translated Set 2 keyboard"
phys = "isa0060/serio0/input0"
# Swap MODE and FN
[[remap]]
input = ["KEY_FN"]
output = ["KEY_MODE"]

[[remap]]
input = ["KEY_RIGHTCTRL"]
output = ["KEY_FN"]

[[remap]]
input = ["KEY_CAPSLOCK"]
output = ["KEY_LEFTCTRL"]

# vim-like navigation.
#TODO Why does not KEY_WAKEUP want to be remapped ... ()
#+end_src

** Start service (needs to be executed as root)
#+name: reload / enable service
#+begin_src sh :dir /sudo:: :results silent :tangle no
cp ~/.config/evremap/evremap.service /usr/lib/systemd/system
#+end_src

#+name: reload / enable service
#+begin_src sh :dir /sudo:: :results silent :tangle no
systemctl daemon-reload
systemctl enable evremap.service
#+end_src

#+name: start service
#+begin_src sh :dir /sudo:: :results silent :tangle no
systemctl start evremap.service
#+end_src
