#+TITLE: Arch setup
#+PROPERTY: header-args :comments link :tangle-mode (identity #o444)
#+options: prop:t
* Tools
** ROSWELL
#+begin_src sh :dir /sudo:: :results silent
  sudo pacman -S roswell
  ros
#+end_src
** kernels
- linux
- linux-lts
** Standard tools
#+name: standard-tools-install
#+begin_src conf :results silent :tangle ./scripts/std-tools.sh :comments yes :mkdirp yes
   sudo pacman -S git base-devel vim intel-ucode bash-completion curl wget
#+end_src
** Man pages
#+name: MAN-LANG
#+begin_src conf
en
#+end_src

#+begin_src conf :results silent :noweb yes :tangle ./scripts/std-tools.sh :comments yes :mkdirp yes
  sudo pacman -S --needed man-db
  sudo pacman -S --needed man-pages-<<MAN-LANG>>
#+end_src
*** Using emacs as PAGER
TODO
** Util
*** Compress
#+begin_src conf :dir /sudo:: :results silent :tangle ./scripts/std-tools.sh :comments yes :mkdirp yes
  sudo pacman -S unrar tar rsync unzip
#+end_src
*** Yay
#+begin_src conf :results silent :tangle ./scripts/std-tools.sh :comments yes :mkdirp yes
   git clone https://aur.archlinux.org/yay-bin.git
   cd yay-bin/
   makepkg -si
   yay -Y --gendb
   yay -Syu --devel
   yay -Y --devel --save
   cd ..
   rm -rf yay-bin/
#+end_src
* Keybindings
Imagine using CTRL [ïŠ‚]
** Evremap
#+name: install evremap
#+begin_src conf :dir /sudo:: :results silent :tangle ./scripts/std-tools.sh :comments yes :mkdirp yes
yay -S evremap-git
#+end_src
* Tracking dotfiles directly in git
** Why bare?
      To keep it minimal without external tools, keeping setup clean with dotfiles where they are expected to be located, no symlinks or strange re-routing with additional tools.
      Basically it's the content of .git folder in a "non-bare" repo (which is used for working).
      With this technique we will store a bare git repo in a "side" dir, like e.g. my choice .dotfiles.
      We use this in combination with alias so that commands are executed against the bare repository and not the common .git local dir. (To avoid inteferring with any other git working repos.)
      For example what you push to on gerrit, bitbhucket, github etc will be bare repors while what you WORK on locally are non-bare.
      We use bare here because the working tree is already in $HOME dir. No need for an extra copy in the repository. 
** Setup
mkdir ~/.dotfiles

#+name: Init bare repo.
#+begin_src conf :results silent :tangle ./scripts/setup.sh :comments yes :mkdirp yes
git init --bare ~/.dotfiles
#+end_src

Make $HOME work tree and git dir $HOME/.dotfiles for the bare .dotfiles repo.

#+name: Add dot alias
#+begin_src conf :results silent :tangle ./scripts/setup.sh :comments yes :mkdirp yes
alias dot='/usr/bin/git --git-dir="$HOME/.dotfiles" --work-tree="$HOME"'
#+end_src

And ofcourse add alias to whatever shell we're using, e.g. bash
#+begin_src conf :results silent :tangle ./scripts/setup.sh :comments yes :mkdirp yes
echo "alias dot='/usr/bin/git --git-dir=$HOME/.dotfiles --work-tree=$HOME'" >> $HOME/.bashrc
#+end_src

Don't show untracked files in the dotfiles repo, as we're working in $HOME.
#+name: showUntrackedFiles
#+begin_src conf :results silent :tangle ./scripts/setup.sh :comments yes :mkdirp yes
dot config status.showUntrackedFiles no
#+end_src
*** Why not show untracked files?
Just track files in work-tree ($HOME) that's been pushed to the bare repository.
*** For bash completion
#+begin_src conf :results silent :tangle ./scripts/setup.sh :comments yes :mkdirp yes
complete -F _complete_alias dot
#+end_src
* SWAY
** SwayFx
#+begin_src sh :dir /sudo:: :results silent
  git clone https://aur.archlinux.org/swayfx.git
  cd swayfx
  makepg -si
  cd ..
  rm -rf swayfx
#+end_src
** Install sway related packages
#+name: Install foot
#+begin_src conf :dir /sudo:: :results silent :tangle ./scripts/std-tools.sh :comments yes :mkdirp yes
yes | pacman -S foot seatd waybar
#+end_src
* Emacs
#+name: install wayland emacs
#+begin_src conf :dir /sudo:: :results silent :tangle ./scripts/std-tools.sh :comments yes :mkdirp yes
  pacman -S emacs-wayland
#+end_src
** Pre
#+begin_src conf :dir /sudo:: :results silent :tangle ./scripts/doom.sh :comments yes :mkdirp yes
  pacman -S fd ripgrep
#+end_src
** Doom
#+begin_src conf :dir /sudo:: :results silent :tangle ./scripts/doom.sh :comments yes :mkdirp yes
git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.config/emacs
export PATH="$HOME/.config/emacs/bin:$PATH"
echo 'export PATH=$HOME/.config/emacs/bin:$PATH' >> ~/.bashrc
~/.config/emacs/bin/doom install
#+end_src
** Sly
#+begin_src emacs-lisp :results silent
(package-install 'sly)
#+end_src

** Node
Node is required for package-install.
#+begin_src conf :dir /sudo:: :results silent :tangle ./scripts/doom.sh :comments yes :mkdirp yes
pacman -S nodejs-lts-iron
#+end_src
** Python
#+begin_src conf :dir /sudo:: :results silent :tangle ./scripts/doom.sh :comments yes :mkdirp yes
pacman -S python python-pip python-pytest python-nose python-black python-isort
#+end_src
*** Pyenv
#+begin_src conf :dir /sudo:: :results silent :tangle ./scripts/pyenv.sh :comments yes :mkdirp yes
curl https://pyenv.run | bash
echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bashrc
echo 'command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bashrc
echo 'eval "$(pyenv init -)"' >> ~/.bashrc
#+end_src
** Vterm
#+begin_src conf :dir /sudo:: :results silent :tangle ./scripts/doom.sh :comments yes :mkdirp yes
pacman -S libvterm make cmake
#+end_src
** Icons
#+begin_src emacs-lisp :results silent
(funcall 'all-the-icons-install-fonts)
(funcall 'nerd-icons-install-fonts)
#+end_src

* Version/backup management
TODO
** Anex
#+begin_src conf :dir /sudo:: :results silent :tangle ./scripts/std-tools.sh :comments yes :mkdirp yes
pacman -S git-annex
#+end_src

#+begin_src conf :dir /sudo:: :results silent :tangle ./scripts/setup.sh :comments yes :mkdirp yes
mkdir annex
cd annex/
git init
git annex init
#+end_src
** Restic
#+begin_src sh :dir /sudo:: :results silent
pacman -S restic
fdisk -l
mkdir /media
mkdir /media/samsung_portable_ssd
mount /dev/sda1 /media/samsung_portable_ssd
mkdir /media/samsung_portable_ssd/arch-backup
mkdir /media/samsung_portable_ssd/arch-backup
restic init --repo /media/samsung_portable_ssd/arch-backup/
restic init --repo /media/samsung_portable_ssd/arch-backup/
#+end_src
* GPG
** Install
#+name: install gpg
#+begin_src conf :dir /sudo:: :results silent :tangle ./scripts/gpg.sh :comments yes :mkdirp yes
   sudo pacman -S gnupg
#+end_src
** Generate key
#+name: generate gpg key
#+begin_src conf :dir /sudo:: :results silent :tangle ./scripts/gpg.sh :comments yes :mkdirp yes
   gpg --gen-key
#+end_src
